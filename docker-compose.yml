services:
  app:
    env_file:
      - .env
    build: .
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    depends_on:
      - db
      - redis
      - kafka
    volumes:
      - ./avatars:/app/avatars

  db:
    image: postgres:16
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USERNAME: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

volumes:
  pgdata:
